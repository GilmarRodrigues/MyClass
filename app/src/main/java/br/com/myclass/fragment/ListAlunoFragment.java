package br.com.myclass.fragment;import android.content.Intent;import android.os.Bundle;import android.support.annotation.Nullable;import android.support.design.widget.Snackbar;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.PopupMenu;import android.support.v7.widget.RecyclerView;import android.view.LayoutInflater;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import com.rey.material.app.Dialog;import com.rey.material.app.DialogFragment;import com.rey.material.app.SimpleDialog;import java.util.List;import br.com.myclass.R;import br.com.myclass.adapter.AlunoAdapter;import br.com.myclass.annotation.RecyclerViewOnClickListenerHack;import br.com.myclass.dao.AlunoDAO;import br.com.myclass.dao.TurmaDAO;import br.com.myclass.fragment.dialog.AdicionarAlunoDialog;import br.com.myclass.fragment.dialog.DadosAlunoDialog;import br.com.myclass.fragment.dialog.DetalhesAlunoDialog;import br.com.myclass.fragment.dialog.EditarAlunoDialog;import br.com.myclass.fragment.dialog.ImgAlunoDialog;import br.com.myclass.model.Aluno;import br.com.myclass.model.ListAluno;import br.com.myclass.model.ListTurma;import br.com.myclass.model.Turma;public class ListAlunoFragment extends BaseFragment implements RecyclerViewOnClickListenerHack, PopupMenu.OnMenuItemClickListener, View.OnClickListener {    protected static final String TAG = "MYCLASS";    private List<Aluno> mListAlunos;    private AlunoAdapter mAdapter;    public RecyclerView mRecyclerView;    private Button btnCadastrar;    private Turma mTurma;    private int position;    @Nullable    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        View view = inflater.inflate(R.layout.fragment_list_aluno, null);        btnCadastrar = (Button) view.findViewById(R.id.btn_cadastrar);        btnCadastrar.setOnClickListener(this);        mRecyclerView = (RecyclerView) view.findViewById(R.id.rv_lista_alunos);        mRecyclerView.setHasFixedSize(true);        Intent intent = getActivity().getIntent();        mTurma = (Turma) intent.getSerializableExtra(ListTurma.KEY);        return view;    }    @Override    public void onActivityCreated(@Nullable Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        if (savedInstanceState != null) {            ListAluno list = (ListAluno) savedInstanceState.getSerializable(ListAluno.KEY);            this.mListAlunos = list.mAlunos;        }        carregarLista();    }    @Override    public void onSaveInstanceState(Bundle outState) {        super.onSaveInstanceState(outState);        outState.putSerializable(ListAluno.KEY, new ListAluno(mListAlunos));    }    @Override    public void onClickListener(View view, int position) {        DadosAlunoDialog.show(getFragmentManager(), mListAlunos.get(position));    }    @Override    public void onLongClickListener(View view, int position) { toast("onClickLong()");}    public void carregarLista() {        TurmaDAO turmaDAO = new TurmaDAO(getActivity());        AlunoDAO alunoDAO = new AlunoDAO(getActivity());        if (mTurma != null) {            Turma turmaSelecionada = turmaDAO.buscarPorId(mTurma.getId());            mListAlunos = alunoDAO.listar(turmaSelecionada);        }        alunoDAO.close();        turmaDAO.close();        LinearLayoutManager llm = new LinearLayoutManager(getActivity());        llm.setOrientation(LinearLayoutManager.VERTICAL);        mRecyclerView.setLayoutManager(llm);        mAdapter = new AlunoAdapter(mListAlunos, getActivity(), onClickPopupMenu(), onClickImg());        mAdapter.setRecyclerViewOnClickListenerHack(this);        mRecyclerView.setAdapter(mAdapter);        mostraBtnCadastro();    }    private AlunoAdapter.ImgOnClickListener onClickImg() {        return new AlunoAdapter.ImgOnClickListener() {            @Override            public void onClickImg(View view, int idx) {                ImgAlunoDialog.show(getFragmentManager(), mListAlunos.get(idx));            }        };    }    private AlunoAdapter.PopupMenuOnClickListener onClickPopupMenu() {        return new AlunoAdapter.PopupMenuOnClickListener() {            @Override            public void onClickMenuPopup(View view, int idx) {                PopupMenu popup = new PopupMenu(getActivity(), view);                MenuInflater inflater = popup.getMenuInflater();                popup.setOnMenuItemClickListener(ListAlunoFragment.this);                inflater.inflate(R.menu.menu_popup, popup.getMenu());                popup.show();                position = idx;            }        };    }    private void mostraBtnCadastro() {        if (mListAlunos.size() <= 0) {            btnCadastrar.setVisibility(View.VISIBLE);        } else {            btnCadastrar.setVisibility(View.INVISIBLE);        }    }    @Override    public void onClick(View v) {        addAluno();    }    private void addAluno(){        AdicionarAlunoDialog.show(getFragmentManager(), mTurma, new AdicionarAlunoDialog.Callback() {            @Override            public void onAlunoAdd(Aluno Aluno) {                //mAdapter.adicionar(position, Aluno);                carregarLista();                snackbar("Aluno salvo com sucesso!", "FECHAR", mRecyclerView);            }        });    }    private void arquivarAluno(Aluno aluno) {        AlunoDAO dao = new AlunoDAO(getActivity());        aluno.setStatus("inativo");        dao.atualizar(aluno);        dao.close();    }    private void desarquivarAluno(Aluno aluno) {        AlunoDAO dao = new AlunoDAO(getActivity());        aluno.setStatus("ativo");        dao.atualizar(aluno);        dao.close();    }    @Override    public boolean onMenuItemClick(MenuItem item) {        switch (item.getItemId()) {            case R.id.menu_detalhes:                DetalhesAlunoDialog.show(getFragmentManager(), mListAlunos.get(position));                break;            case R.id.menu_editar:                EditarAlunoDialog.show(getFragmentManager(), mListAlunos.get(position), new EditarAlunoDialog.Callback() {                    @Override                    public void onAlunoAdd(Aluno Aluno) {                        carregarLista();                        snackbar("Aluno atualizado com sucesso!", "FECHAR", mRecyclerView);                    }                });                break;            case R.id.menu_arquivar:                excluir();                break;        }        return true;    }    private void excluir() {        Dialog.Builder builder = new SimpleDialog.Builder(R.style.SimpleDialogLight) {            @Override            public void onPositiveActionClicked(DialogFragment fragment) {                final Aluno aluno = mListAlunos.get(position);                arquivarAluno(aluno);                mAdapter.remove(position);                mostraBtnCadastro();                Snackbar.make(mRecyclerView, "Aluno excluido com sucesso.", Snackbar.LENGTH_LONG)                        .setAction("DESFAZER", new View.OnClickListener() {                            @Override                            public void onClick(View v) {                                desarquivarAluno(aluno);                                mAdapter.adicionar(position, aluno);                                mostraBtnCadastro();                            }                        })                        .setActionTextColor(getActivity().getResources().getColor(R.color.accent))                        .show();                super.onPositiveActionClicked(fragment);            }            @Override            public void onNegativeActionClicked(DialogFragment fragment) {                super.onNegativeActionClicked(fragment);            }        };        ((SimpleDialog.Builder) builder).message("Deseja excluir o aluno " + mListAlunos.get(position).getNome() + "?")                .title("Atenção!")                .positiveAction("EXCLUIR")                .negativeAction("CANCELAR");        DialogFragment fragment = DialogFragment.newInstance(builder);        fragment.show(getFragmentManager(), null);    }}